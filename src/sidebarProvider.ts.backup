import * as vscode from 'vscode';
import { GameState } from './gameState';
import { VisualEngine } from './visualEngine';

export class SidebarProvider implements vscode.WebviewViewProvider {
    private _view?: vscode.WebviewView;
    private visualEngine: VisualEngine;
    private animationFrame: number = 0;
    private animationTimer?: NodeJS.Timeout;

    constructor(
        private readonly _extensionUri: vscode.Uri,
        private gameState: GameState
    ) { 
        console.log('CodeQuest: SidebarProvider constructor called');
        console.log('CodeQuest: Extension URI:', _extensionUri?.toString());
        console.log('CodeQuest: GameState:', gameState ? 'exists' : 'null');
        
        try {
            this.visualEngine = new VisualEngine(gameState);
            console.log('CodeQuest: VisualEngine created successfully');
        } catch (error) {
            console.error('CodeQuest: Error creating VisualEngine:', error);
        }
        
        try {
            this.startImageAnimation();
            console.log('CodeQuest: Image animation started');
        } catch (error) {
            console.error('CodeQuest: Error starting animation:', error);
        }
    }

    private startImageAnimation() {
        // Cycle through images every 0.5 seconds for faster animation
        this.animationTimer = setInterval(() => {
            const visualState = this.visualEngine.getVisualState();
            
            if (visualState.useImages) {
                // Idle state: cycle between 2 images (0, 1)
                this.animationFrame = (this.animationFrame + 1) % 2;
            } else if (visualState.playerState === 'fighting') {
                // Combat state: cycle between 3 images (0, 1, 2)
                this.animationFrame = (this.animationFrame + 1) % 3;
            }
            
            this.refresh();
        }, 500); // 0.5 second intervals
    }

    resolveWebviewView(webviewView: vscode.WebviewView) {
        console.log('CodeQuest: resolveWebviewView called! This means webview is working!');
        this._view = webviewView;

        webviewView.webview.options = {
            enableScripts: true,
            localResourceRoots: [
                this._extensionUri,
                vscode.Uri.joinPath(this._extensionUri, 'Assets')
            ]
        };

        // Set initial HTML content
        const html = this._getHtmlForWebview();
        console.log('CodeQuest: Setting HTML content, length:', html.length);
        console.log('CodeQuest: HTML preview:', html.substring(0, 200) + '...');
        webviewView.webview.html = html;
        
        console.log('CodeQuest: WebView resolved and HTML set');

        // Show a test message to confirm webview is working
        vscode.window.showInformationMessage('üéÆ CodeQuest WebView loaded! Check the Knight Display panel.');

        // Handle messages from webview
        webviewView.webview.onDidReceiveMessage(data => {
            console.log('CodeQuest: Received message from webview:', data);
            switch (data.type) {
                case 'startBossBattle':
                    vscode.commands.executeCommand('codequest.startBossBattle');
                    break;
                case 'completeBossBattle':
                    vscode.commands.executeCommand('codequest.completeBossBattle');
                    break;
                case 'resetStats':
                    vscode.commands.executeCommand('codequest.resetStats');
                    break;
            }
        });
    }

    refresh() {
        if (this._view) {
            // Check if we should use images for idle state
            const shouldUseImages = this.visualEngine.shouldUseImages();
            console.log('CodeQuest: Refresh - should use images:', shouldUseImages);
            
            if (shouldUseImages) {
                // Cycle animation frame for alternating images
                this.animationFrame = (this.animationFrame + 1) % 2;
            }
            
            this._view.webview.html = this._getHtmlForWebview();
        }
    }

    private _getHtmlForWebview() {
        const stats = this.gameState.getStats();
        console.log('CodeQuest: Getting stats for HTML:', stats);
        const xpPercentage = (stats.xp / stats.xpToNextLevel) * 100;
        
        // Check visual state
        let visualState;
        try {
            visualState = this.visualEngine.getVisualState();
        } catch (error) {
            console.error('CodeQuest: Error getting visual state:', error);
            visualState = { playerState: 'fighting', useImages: false, wizardPresent: false, bossCheckpoints: [] };
        }
        
        const isIdle = visualState.useImages;
        const isFighting = visualState.playerState === 'fighting';
        const isBossBattle = visualState.playerState === 'boss_battle';
        
        // Always show some image to test webview functionality
        let currentImage = '';
        let imageSection = '';
        
        console.log('CodeQuest: Visual state - idle:', isIdle, 'fighting:', isFighting, 'boss:', isBossBattle);
        
        if (isIdle) {
            // Idle state: cycle between 2 knight images
            const idleImages = [
                this._view?.webview.asWebviewUri(
                    vscode.Uri.joinPath(this._extensionUri, 'Assets', 'Idle', 'pixel art of a knight 1.png')
                ),
                this._view?.webview.asWebviewUri(
                    vscode.Uri.joinPath(this._extensionUri, 'Assets', 'Idle', 'pixel art of a knight 2.png')
                )
            ];
            currentImage = idleImages[this.animationFrame % 2]?.toString() || '';
            console.log('CodeQuest: Idle image selected:', currentImage);
            imageSection = `
                <div class="game-section idle-section">
                    <h3>üè∞ Knight's Rest üè∞</h3>
                    <img src="${currentImage}" alt="Knight at Campfire" class="game-image" />
                    <p>üî• Resting by the campfire... üî•</p>
                    <p>üí§ Ready for your next adventure! üí§</p>
                    <p><small>Debug: Frame ${this.animationFrame}, Image: ${currentImage ? 'Found' : 'Missing'}</small></p>
                </div>
            `;
        } else if (isFighting) {
            // Combat state: cycle between 3 knight vs slime images
            const combatImages = [
                this._view?.webview.asWebviewUri(
                    vscode.Uri.joinPath(this._extensionUri, 'Assets', 'Slime', 'Knight V Slime 1.png')
                ),
                this._view?.webview.asWebviewUri(
                    vscode.Uri.joinPath(this._extensionUri, 'Assets', 'Slime', 'Knight V Slime 2.png')
                ),
                this._view?.webview.asWebviewUri(
                    vscode.Uri.joinPath(this._extensionUri, 'Assets', 'Slime', 'Knight V Slime 3.png')
                )
            ];
            currentImage = combatImages[this.animationFrame % 3]?.toString() || '';
            console.log('CodeQuest: Combat image selected:', currentImage);
            imageSection = `
                <div class="game-section combat-section">
                    <h3>‚öîÔ∏è Combat Mode ‚öîÔ∏è</h3>
                    <img src="${currentImage}" alt="Knight Fighting Slime" class="game-image" />
                    <p>üó°Ô∏è Fighting slimes! üó°Ô∏è</p>
                    <p>üî• Combo: ${stats.combo}x üî•</p>
                    <p><small>Debug: Frame ${this.animationFrame}, Image: ${currentImage ? 'Found' : 'Missing'}</small></p>
                </div>
            `;
        } else {
            // Default state - always show a test image to verify webview works
            const testImage = this._view?.webview.asWebviewUri(
                vscode.Uri.joinPath(this._extensionUri, 'Assets', 'Idle', 'pixel art of a knight 1.png')
            );
            console.log('CodeQuest: Test image URI:', testImage?.toString());
            imageSection = `
                <div class="game-section">
                    <h3>üéÆ CodeQuest Active üéÆ</h3>
                    <img src="${testImage}" alt="Test Knight" class="game-image" onerror="this.style.display='none'; this.nextElementSibling.style.display='block';" />
                    <div style="display:none; color: red;">‚ùå Image failed to load: ${testImage}</div>
                    <p>Type to see combat animations!</p>
                    <p><small>State: ${visualState.playerState} | Frame: ${this.animationFrame}</small></p>
                </div>
            `;
        }

        // Simplified HTML for debugging
        return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CodeQuest Knight Display</title>
    <style>
        body {
            font-family: var(--vscode-font-family);
            padding: 10px;
            color: var(--vscode-foreground);
            background: var(--vscode-editor-background);
        }
        .game-image {
            width: 100%;
            max-width: 250px;
            height: auto;
            border-radius: 8px;
            margin: 10px 0;
        }
        .game-section {
            text-align: center;
            padding: 15px;
            border-radius: 8px;
            margin: 10px 0;
            background: rgba(0,100,200,0.2);
            border: 1px solid rgba(0,100,200,0.5);
        }
    </style>
</head>
<body>
    <h2>üñºÔ∏è Knight Display</h2>
    ${imageSection}
    <hr>
    <p><strong>Level:</strong> ${stats.level}</p>
    <p><strong>Combo:</strong> ${stats.combo}x</p>
    <p><strong>Extension URI:</strong> ${this._extensionUri.toString()}</p>
</body>
</html>`;
    }
}
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CodeQuest</title>
    <style>
        body {
            font-family: var(--vscode-font-family);
            padding: 10px;
            color: var(--vscode-foreground);
            background: var(--vscode-editor-background);
        }
        .header {
            text-align: center;
            margin-bottom: 20px;
        }
        .level {
            font-size: 24px;
            font-weight: bold;
            color: #ffd700;
        }
        .game-image {
            width: 100%;
            max-width: 300px;
            height: auto;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.3);
            margin: 20px 0;
        }
        .game-section {
            text-align: center;
            padding: 20px;
            border-radius: 10px;
            margin: 10px 0;
        }
        .idle-section {
            background: rgba(139, 69, 19, 0.3); /* Brown for campfire */
            border: 2px solid #8B4513;
        }
        .combat-section {
            background: rgba(220, 20, 60, 0.3); /* Red for combat */
            border: 2px solid #DC143C;
        }
        .boss-section {
            background: rgba(148, 0, 211, 0.3); /* Purple for boss */
            border: 2px solid #9400D3;
        }
        .xp-bar {
            width: 100%;
            height: 20px;
            background: #333;
            border-radius: 10px;
            overflow: hidden;
            margin: 10px 0;
        }
        .xp-fill {
            height: 100%;
            background: linear-gradient(45deg, #4CAF50, #8BC34A);
            width: ${xpPercentage}%;
            transition: width 0.3s ease;
        }
        .stat-row {
            display: flex;
            justify-content: space-between;
            margin: 8px 0;
            padding: 5px 0;
            border-bottom: 1px solid #333;
        }
        .stat-label {
            font-weight: bold;
        }
        .combo {
            color: ${stats.combo > 10 ? '#ff6b35' : stats.combo > 5 ? '#ffd23f' : '#ffffff'};
            font-weight: bold;
        }
        .boss-battle {
            background: #2d1b69;
            border: 2px solid #8b5cf6;
            border-radius: 8px;
            padding: 10px;
            margin: 10px 0;
        }
        .boss-name {
            color: #fbbf24;
            font-weight: bold;
            margin-bottom: 5px;
        }
        .boss-progress {
            width: 100%;
            height: 15px;
            background: #1f2937;
            border-radius: 8px;
            overflow: hidden;
        }
        .boss-fill {
            height: 100%;
            background: linear-gradient(45deg, #ef4444, #dc2626);
            transition: width 0.3s ease;
        }
        .button {
            background: #0d7377;
            border: none;
            color: white;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            margin: 5px;
            width: calc(100% - 10px);
        }
        .button:hover {
            background: #14a085;
        }
        .streak {
            color: #f59e0b;
            font-size: 18px;
        }
        .achievement {
            background: #065f46;
            border-left: 4px solid #10b981;
            padding: 8px;
            margin: 5px 0;
            border-radius: 0 4px 4px 0;
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="level">‚öîÔ∏è Level ${stats.level} ‚öîÔ∏è</div>
        <div class="xp-bar">
            <div class="xp-fill"></div>
        </div>
        <div>${stats.xp}/${stats.xpToNextLevel} XP</div>
    </div>

    ${imageSection}

    <div class="stat-row">
        <span class="stat-label">üî• Daily Streak:</span>
        <span class="streak">${stats.dailyStreak} days</span>
    </div>

    <div class="stat-row">
        <span class="stat-label">‚ö° Current Combo:</span>
        <span class="combo">${stats.combo}x</span>
    </div>

    <div class="stat-row">
        <span class="stat-label">üèÜ Best Combo:</span>
        <span>${stats.maxCombo}x</span>
    </div>

    <div class="stat-row">
        <span class="stat-label">üìù Lines Written:</span>
        <span>${stats.totalLinesWritten}</span>
    </div>

    <div class="stat-row">
        <span class="stat-label">üêâ Bosses Defeated:</span>
        <span>${stats.bossBattlesWon}</span>
    </div>

    ${stats.currentBossBattle ? `
    <div class="boss-battle">
        <div class="boss-name">üêâ ${stats.currentBossBattle.name}</div>
        <div class="boss-progress">
            <div class="boss-fill" style="width: ${(stats.currentBossBattle.currentLines / stats.currentBossBattle.targetLines) * 100}%"></div>
        </div>
        <div>${stats.currentBossBattle.currentLines}/${stats.currentBossBattle.targetLines} lines</div>
        ${stats.currentBossBattle.currentLines >= stats.currentBossBattle.targetLines ?
                    '<button class="button" onclick="completeBossBattle()">üéâ Claim Victory!</button>' : ''
                }
    </div>
    ` : '<button class="button" onclick="startBossBattle()">üêâ Start Boss Battle</button>'}

    ${stats.level >= 5 && stats.dailyStreak >= 7 ?
                '<div class="achievement">üèÖ Week Warrior - 7 day streak achieved!</div>' : ''}
    
    ${stats.maxCombo >= 50 ?
                '<div class="achievement">üî• Combo Master - 50x combo achieved!</div>' : ''}

    <button class="button" onclick="resetStats()" style="background: #dc2626; margin-top: 20px;">
        üîÑ Reset Stats
    </button>

    <script>
        const vscode = acquireVsCodeApi();
        
        function startBossBattle() {
            vscode.postMessage({ type: 'startBossBattle' });
        }
        
        function completeBossBattle() {
            vscode.postMessage({ type: 'completeBossBattle' });
        }
        
        function resetStats() {
            vscode.postMessage({ type: 'resetStats' });
        }
    </script>
</body>
</html>`;
    }
}